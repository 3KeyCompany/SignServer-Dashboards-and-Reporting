input {
  syslog {
    host => "0.0.0.0"
    port => 5144

    codec => multiline {
      pattern => "<%{POSINT:priority}>%{SYSLOGLINE}"
      negate => "true"
      what => "previous"

      auto_flush_interval => 1
      max_lines => 500
      charset => "UTF-8"
   }

  }
}

filter {

  mutate {
    add_field => {
      "logstash_node" => "lab04.3key.company"
      "[@metadata][index]" => "signserver-log"
    }

    rename => {
      "message" => "original_message"
      "logsource" => "[hostname]"
      "facility" => "[syslog][facility]"
      "facility_label" => "[syslog][facility_label]"
      "severity" => "[syslog][severity]"
      "severity_label" => "[syslog][severity_label]"
      "priority" => "[syslog][priority]"
      "pid" => "[syslog][pid]"
      "program" => "[syslog][program]"
    }
  }

  # parse syslog and signserver message
  grok {
    match => { "original_message" => "\d{2}:\d{2}:\d{2},\d{3}\s+%{LOGLEVEL:[syslog][loglevel]}\s+\[%{NOTSPACE:[signserver][logger]}\]\s+\(%{DATA:[signserver][thread]}\)\s+%{GREEDYDATA:[signserver][message]}" }
  }

  if "_grokparsefailure" not in [tags]{
    mutate {
      gsub => [
        # Remove whitespaces from string like "default-threads - 24" if contain dash
        "[ejbca][thread]", " - ", "-",
        # Replace the spaces with a dash
        "[ejbca][thread]", " ", "-"
      ]
      remove_field => [ "original_message", "host", "timestamp" ]

    }
  }

  # ADMIN_OPERATION message like:
  # ADMIN OPERATION; subjectDN=O=3Key Company s.r.o., CN=SuperAdmin; serialNumber=3b886838ee3611001b0cbf06d2d2ebc83af59d4;
  # issuerDN=O=3Key Company s.r.o., CN=Management CA; authorized=true; operation=getStatus; arguments=Worker{id: 2},;
  #
  if [signserver][message] =~ /^ADMIN OPERATION;/ {
    grok {
      match => { "[signserver][message]" => "%{DATA:[signserver][operation]}; %{GREEDYDATA:[signserver][adminoperation_message]};" }
    }

    mutate {
      replace => { "[@metadata][index]" => "signserver-admin" }
    }

    kv {
      allow_duplicate_values => false
      field_split_pattern => "; "
      source => "[signserver][adminoperation_message]"
      target => "[signserver][adminoperation]"
      transform_key => "lowercase"
    }
  }

  # Worker Log: AllFieldsWorkerLogger
  #
  if [signserver][message] =~ /^AllVariablesLogger;/ {
    grok {
      match => { "[signserver][message]" => "%{DATA:[signserver][operation]}; %{GREEDYDATA:[signserver][worker_message]};" }
    }

    mutate {
      replace => { "[@metadata][index]" => "signserver-worker" }
    }

    kv {
      allow_duplicate_values => false
      field_split_pattern => "; "
      value_split_pattern => ": "
      source => "[signserver][worker_message]"
      target => "[signserver][worker]"
      transform_key => "lowercase"
    }
  }

  # System Log: starting with the EVENT field
  # EVENT: SET_WORKER_CONFIG; OUTCOME: SUCCESS; MODULE: WORKER_CONFIG; ADMINISTRATOR: O=3Key Company s.r.o., CN=SuperAdmin;
  # ISSUER: O=3Key Company s.r.o., CN=Management CA; SERIAL_NUMBER: 3b886838ee3611001b0cbf06d2d2ebc83af59d4; WORKER_ID: 2; changed:LOCATION: Prague; REPLY_TIME:1584625843861
  #
  if [signserver][logger] =~ "org.signserver.server.log.SignServerLog4jDevice" {
    if [signserver][message] =~ /^EVENT:/ {
      mutate {
        replace => { "[@metadata][index]" => "signserver-system" }
        add_field => { "[signserver][operation]" => "system" }
      }

      kv {
        allow_duplicate_values => false
        field_split_pattern => "; "
        value_split_pattern => ": "
        source => "[signserver][message]"
        target => "[signserver][system]"
        transform_key => "lowercase"
      }
    }
  }

  # check if we have client IP information and parse it as geoipdata
  if [signserver][worker][client_ip] {
    geoip {
        database => "/usr/share/logstash/vendor/bundle/jruby/2.5.0/gems/logstash-filter-geoip-6.0.3-java/vendor/GeoLite2-City.mmdb"
        source => "[signserver][worker][client_ip]"
        target => "[signserver][worker][geoip]"
    }
  }
}

output {

    elasticsearch {
      hosts => ["http://127.0.0.1:9200"]                            # elasticsearch hostname/ip and port
      index => "%{[@metadata][index]}-%{+YYYY.MM.dd}"                # metadata index to index data in corrent index

      user => "logstash_signserver_user"
      password => ""

      #manage_template => false
    }
}